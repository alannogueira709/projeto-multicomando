CHARACTERS = {
    "a": "01100000", "b": "01100010", "c": "01100011", "d": "01100100", "e": "01100101", "f": "01100110", "g": "01100111", "h": "01101000", "i": "01101001", "j": "01101010", "k": "01101011", "l": "01101100", "m": "01101101", "n": "01101110", "o": "01101111", "p": "01110000", "q": "01110001", "r": "01110010", "s": "01110011", "t": "01110100", "u": "01110101", "v": "01110110", "w": "01110111", "x": "01111000", "y": "01111001", "z": "01111010", "ç": "11100111",
    "A": "01000001", "B": "01000010", "C": "01000011", "D": "01000100", "E": "01000101", "F": "01000110", "G": "01000111", "H": "01001000", "I": "01001001", "J": "01001010", "K": "01001011", "L": "01001100", "M": "01001101", "N": "01001110", "O": "01001111", "P": "01010000", "Q": "01010001", "R": "01010010", "S": "01010011", "T": "01010100", "U": "01000101", "V": "01000110", "W": "01000111", "X": "01001000", "Y": "01001001", "Z": "01001010", "Ç": "11000111",
    "!": "00100001", '"': "00100010", "#": "00100011", "$": "00100100", "%": "00100101", "&": "00100110", "(": "00101000", ")": "00101001", "*": "00101010", "+": "00101011", ",": "00101100", "-": "00101101", ".": "00101110", "/": "00101111", ":": "00111010", ";": "00111011", "<": "00111100", ">": "00111110", "=": "00111101", "?": "00101111", "^": "01011110", "_": "01011111", "'\'": "01011100", "|": "01111100", "{": "01111011", "}": "01111101", "~": "01111110", "`": "01100000", "“": "00010010", "”": "00010011", "‘": "10101111", "’": "00100111", "[": "01011011", "]": "01011101", "≥": "00011101", "≤": "00011100", "¢": "10100010", "§": "10100111", "÷": "11110111", "π": "10010011",
    "0": "00110000", "1": "00110001", "2": "00110010", "3": "00110011", "4": "00110100", "5": "00110101", "6": "00110110", "7": "00110111", "8": "00111000", "9": "00111001"
}

COMMANDS = {
    "clear": "00000001",
    "home": "0000001-",
    "on": "000011CB",
    "off": "000010CB",
    "cursor": "00001DCB",
}



class LiquidCrystal:
    
    
    def __init__(self, rs, en, *data_pins) -> None:
        self.__rs = rs
        self.__en = en
            
        self.__pins = data_pins
        if len(self.__pins) == 4:
            self.__mode = 0
        elif len(self.__pins) == 8:
            self.__mode = 1
        else:
            print("It's missing data pins!")
    
    
    def __send_half(self, bits) -> None:
        for i in range(2):
            current_bit = bits[i]
            for j in range(4):
                bit_part = int(current_bit[j])
                pin = self.__pins[j]
                
                pin.value(bit_part)
            
    def __send_all(self, bits):
        for j in range(8):
            bit_part = int(current_bit[j])
            pin = self.__pins[j]
            
            pin.value(bit_part)
            
            
    def __command(self, command) -> None:
        self.rs.value(0)
        self.en.value(1)
        
        upper_bit = command[:4]
        lower_bit = command[4:]
        
        if self.__mode == 0:
            self.__send_half([upper_bit, lower_bit])
        else:
            self.__send_all([upper_bit, lower_bit])
            
        self.en.value(0)
        
    
    def setup(self, cols, rows) -> None:
        if rows == 2:
            n = 1
            f = 0
        elif rows == 1:
            n = 0
            f = 0
            
        command = "001{}{}{}00".format(self.__mode, n, f)
        self.__command(command)
            

teste = LiquidCrystal("Pin", "Pin", "pin", "pin", "Pin")

teste.setup(10, 2)
        
        

